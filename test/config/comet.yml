grpc:
  server:
    addr: :3109
  client:
    addr: :3119

# websocket連線
websocket:
  addr: :3102

# 優化參數
protocol:
  # 先初始化多少個time.Timer(心跳機制用)
  timer: 1
  # 每個time.Timer一開始能接收的TimerData數量(每個人心跳超時動作)
  timerSize: 5
  # 每一個連線開grpc channel 接收資料的緩充量，當寫的速度大於讀的速度這時會阻塞，透過調大此值可以有更多緩衝避免阻塞
  receiveProtoBuffer: 5
  # 每一個連線開異步Proto結構緩型Pool的大小，跟client透過tcp or websocket傳遞資料做消費速度有關聯
  # 由於寫的速度有可能大於讀的速度，這時會自行close此連線，透過調大此值可以有更多緩衝close
  clientProto: 3
  # 連線後多久(秒)沒申請進入某房間就把連線close
  handshakeTimeout: 8s

# 分散紀錄各user連線相關結構
bucket:
  # 固定幾個bucket做分散
  size: 2
  # 每個Bucket預先管理多少個user，不夠會自動加倍開
  channel: 3
  # 每個Bucket一開始管理多少個房間，不夠會自動加倍開
  room: 3
  # 每個Bucket開幾個goroutine併發做房間推送
  routineAmount: 2
  # 每個goroutine推送管道最大緩衝量
  routineSize: 8

log:
  # 開啟debug模式只會紀錄Info Level以上的log
  # 使用DPanic level時會Panic
  debug: true
  # 是否關閉log的輸出檔案代碼位置
  disableCaller: true
  # 是否關閉Warn Level(不包含)以上的stack trace message
  disableStacktrace: true
  # log採樣基數
  sampling:
    # 當前Sync log數量大於此數字就會開始採樣
    initial: 10
    # 採樣機率
    thereafter: 1
  # Error Level(包含) 以上的log是否單獨輸出
  # 不跟Info Level(包含) 以下的log輸出在同一個位置
  errorAloneOutput: true
  # log位置
  # 如果errorAloneOutput = true 則只會有Info Level(包含) 以下 log
  # 反之則不限定Level
  outputPaths:
    - stderr
  # error log位置
  # 如果errorAloneOutput = true 則只會有Error Level(包含) 以上 log
  # 反之則只會有log處理流程中如果有發生錯誤的log
  errorOutputPaths:
    - stderr
