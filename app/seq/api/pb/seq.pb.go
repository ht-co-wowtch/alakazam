// Code generated by protoc-gen-go. DO NOT EDIT.
// source: seq.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0df69c63ddc0f76, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type SeqReq struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Count                int64    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SeqReq) Reset()         { *m = SeqReq{} }
func (m *SeqReq) String() string { return proto.CompactTextString(m) }
func (*SeqReq) ProtoMessage()    {}
func (*SeqReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0df69c63ddc0f76, []int{1}
}

func (m *SeqReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SeqReq.Unmarshal(m, b)
}
func (m *SeqReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SeqReq.Marshal(b, m, deterministic)
}
func (m *SeqReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeqReq.Merge(m, src)
}
func (m *SeqReq) XXX_Size() int {
	return xxx_messageInfo_SeqReq.Size(m)
}
func (m *SeqReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SeqReq.DiscardUnknown(m)
}

var xxx_messageInfo_SeqReq proto.InternalMessageInfo

func (m *SeqReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SeqReq) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type SeqResp struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SeqResp) Reset()         { *m = SeqResp{} }
func (m *SeqResp) String() string { return proto.CompactTextString(m) }
func (*SeqResp) ProtoMessage()    {}
func (*SeqResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0df69c63ddc0f76, []int{2}
}

func (m *SeqResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SeqResp.Unmarshal(m, b)
}
func (m *SeqResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SeqResp.Marshal(b, m, deterministic)
}
func (m *SeqResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeqResp.Merge(m, src)
}
func (m *SeqResp) XXX_Size() int {
	return xxx_messageInfo_SeqResp.Size(m)
}
func (m *SeqResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SeqResp.DiscardUnknown(m)
}

var xxx_messageInfo_SeqResp proto.InternalMessageInfo

func (m *SeqResp) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type SeqCreateReq struct {
	Batch                int64    `protobuf:"varint,1,opt,name=batch,proto3" json:"batch,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SeqCreateReq) Reset()         { *m = SeqCreateReq{} }
func (m *SeqCreateReq) String() string { return proto.CompactTextString(m) }
func (*SeqCreateReq) ProtoMessage()    {}
func (*SeqCreateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0df69c63ddc0f76, []int{3}
}

func (m *SeqCreateReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SeqCreateReq.Unmarshal(m, b)
}
func (m *SeqCreateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SeqCreateReq.Marshal(b, m, deterministic)
}
func (m *SeqCreateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeqCreateReq.Merge(m, src)
}
func (m *SeqCreateReq) XXX_Size() int {
	return xxx_messageInfo_SeqCreateReq.Size(m)
}
func (m *SeqCreateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SeqCreateReq.DiscardUnknown(m)
}

var xxx_messageInfo_SeqCreateReq proto.InternalMessageInfo

func (m *SeqCreateReq) GetBatch() int64 {
	if m != nil {
		return m.Batch
	}
	return 0
}

type SeqCreateResp struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SeqCreateResp) Reset()         { *m = SeqCreateResp{} }
func (m *SeqCreateResp) String() string { return proto.CompactTextString(m) }
func (*SeqCreateResp) ProtoMessage()    {}
func (*SeqCreateResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0df69c63ddc0f76, []int{4}
}

func (m *SeqCreateResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SeqCreateResp.Unmarshal(m, b)
}
func (m *SeqCreateResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SeqCreateResp.Marshal(b, m, deterministic)
}
func (m *SeqCreateResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeqCreateResp.Merge(m, src)
}
func (m *SeqCreateResp) XXX_Size() int {
	return xxx_messageInfo_SeqCreateResp.Size(m)
}
func (m *SeqCreateResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SeqCreateResp.DiscardUnknown(m)
}

var xxx_messageInfo_SeqCreateResp proto.InternalMessageInfo

func (m *SeqCreateResp) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*Empty)(nil), "pb.Empty")
	proto.RegisterType((*SeqReq)(nil), "pb.SeqReq")
	proto.RegisterType((*SeqResp)(nil), "pb.SeqResp")
	proto.RegisterType((*SeqCreateReq)(nil), "pb.SeqCreateReq")
	proto.RegisterType((*SeqCreateResp)(nil), "pb.SeqCreateResp")
}

func init() { proto.RegisterFile("seq.proto", fileDescriptor_b0df69c63ddc0f76) }

var fileDescriptor_b0df69c63ddc0f76 = []byte{
	// 211 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x4e, 0x2d, 0xd4,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x62, 0xe7, 0x62, 0x75, 0xcd, 0x2d,
	0x28, 0xa9, 0x54, 0xd2, 0xe3, 0x62, 0x0b, 0x4e, 0x2d, 0x0c, 0x4a, 0x2d, 0x14, 0xe2, 0xe3, 0x62,
	0xca, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0e, 0x62, 0xca, 0x4c, 0x11, 0x12, 0xe1, 0x62,
	0x4d, 0xce, 0x2f, 0xcd, 0x2b, 0x91, 0x60, 0x02, 0x0b, 0x41, 0x38, 0x4a, 0x92, 0x5c, 0xec, 0x60,
	0xf5, 0xc5, 0x05, 0xe8, 0x1a, 0x94, 0x54, 0xb8, 0x78, 0x82, 0x53, 0x0b, 0x9d, 0x8b, 0x52, 0x13,
	0x4b, 0x52, 0x41, 0x06, 0x8a, 0x70, 0xb1, 0x26, 0x25, 0x96, 0x24, 0x67, 0x40, 0x95, 0x40, 0x38,
	0x4a, 0xf2, 0x5c, 0xbc, 0x48, 0xaa, 0x30, 0x8d, 0x31, 0x9a, 0xc8, 0xc8, 0xc5, 0x1c, 0x9c, 0x5a,
	0x28, 0x24, 0xc3, 0xc5, 0x12, 0x90, 0x99, 0x97, 0x2e, 0xc4, 0xa9, 0x57, 0x90, 0xa4, 0x07, 0x76,
	0xac, 0x14, 0x82, 0x29, 0x24, 0xcb, 0xc5, 0xe4, 0x99, 0x22, 0xc4, 0x05, 0x12, 0x80, 0xb8, 0x5f,
	0x8a, 0x1b, 0xce, 0x2e, 0x2e, 0x10, 0x92, 0xe3, 0x62, 0xf6, 0x4c, 0x29, 0xc6, 0x2d, 0xaf, 0xcb,
	0xc5, 0x06, 0x71, 0x82, 0x90, 0x00, 0x54, 0x18, 0xee, 0x6e, 0x29, 0x41, 0x34, 0x91, 0xe2, 0x82,
	0x24, 0x36, 0x70, 0xc8, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xfe, 0x60, 0xc0, 0x75, 0x46,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SeqClient is the client API for Seq service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SeqClient interface {
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Id(ctx context.Context, in *SeqReq, opts ...grpc.CallOption) (*SeqResp, error)
	Ids(ctx context.Context, in *SeqReq, opts ...grpc.CallOption) (*SeqResp, error)
	Create(ctx context.Context, in *SeqCreateReq, opts ...grpc.CallOption) (*SeqCreateResp, error)
}

type seqClient struct {
	cc *grpc.ClientConn
}

func NewSeqClient(cc *grpc.ClientConn) SeqClient {
	return &seqClient{cc}
}

func (c *seqClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.Seq/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seqClient) Id(ctx context.Context, in *SeqReq, opts ...grpc.CallOption) (*SeqResp, error) {
	out := new(SeqResp)
	err := c.cc.Invoke(ctx, "/pb.Seq/Id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seqClient) Ids(ctx context.Context, in *SeqReq, opts ...grpc.CallOption) (*SeqResp, error) {
	out := new(SeqResp)
	err := c.cc.Invoke(ctx, "/pb.Seq/Ids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seqClient) Create(ctx context.Context, in *SeqCreateReq, opts ...grpc.CallOption) (*SeqCreateResp, error) {
	out := new(SeqCreateResp)
	err := c.cc.Invoke(ctx, "/pb.Seq/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeqServer is the server API for Seq service.
type SeqServer interface {
	Ping(context.Context, *Empty) (*Empty, error)
	Id(context.Context, *SeqReq) (*SeqResp, error)
	Ids(context.Context, *SeqReq) (*SeqResp, error)
	Create(context.Context, *SeqCreateReq) (*SeqCreateResp, error)
}

func RegisterSeqServer(s *grpc.Server, srv SeqServer) {
	s.RegisterService(&_Seq_serviceDesc, srv)
}

func _Seq_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeqServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Seq/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeqServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seq_Id_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeqReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeqServer).Id(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Seq/Id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeqServer).Id(ctx, req.(*SeqReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seq_Ids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeqReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeqServer).Ids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Seq/Ids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeqServer).Ids(ctx, req.(*SeqReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seq_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeqCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeqServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Seq/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeqServer).Create(ctx, req.(*SeqCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Seq_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Seq",
	HandlerType: (*SeqServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Seq_Ping_Handler,
		},
		{
			MethodName: "Id",
			Handler:    _Seq_Id_Handler,
		},
		{
			MethodName: "Ids",
			Handler:    _Seq_Ids_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Seq_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "seq.proto",
}
